--important: this file is part of a game project and should not be modified without understanding the game logic.
--this file contains the game logic for a space shooter game called "gaders".
--the game features player movement, enemy spawning, shooting mechanics, and collision detection.
--it also includes sound effects, particle effects, and a scoring system.
--the game is structured with different states such as playing, level complete, and game over.
--the player can move left, right, and shoot bullets at enemies.
--enemies can spawn in different patterns and can be destroyed by player bullets.
--the game includes features like respawning, health management, and score tracking.
--the game is designed to be played in a pico-8 environment.
--
--
-- todos and features to implement:
--features
--add background
--done*** have aliens fall at different speeds
--done*** have aliens follow 4 different patterns
--done*** add rock meteors that can't be destrot
--add bonus round after two rounds
--done*** add scoring for hit percentage bonus
--add killer image for the game
--add freeman at 1000
--add falling men to capture
--add power when hitting red ones
--give extra guns double barrel
--limit bullets after 100 bullets a 30 cooldown
--add repeating game music
--add leader boards
--make game harder and faster
--after fourth round bring out big ass ship that shoots back
-- constants
--done** add kamikazes
--add a way to keep track of kills
--add power ups to get v guns
--add power ups to get side guns
--fix it to where a hit loses one gun set
--add power up to blow entire screen
--fix double calculation on the scoreboard...it should only add it once not multiple
player_left = 2
player_idle = 1
player_right = 0
score = 0
game_state = 0
level = 1
enemies_count = 20
shots_fired_count = 0
accuracy = 0
bonus = 0
enemy_squadron_size = 5 ---fix this to a reasobable value
max_health = 5
max_enemies = 15

--sounds
sound_level_complete = 10
sound_compute_kill_score = 11

after_burner = {}
meteor_trails = {}

-- player table
player = {
  x = 64,
  y = 120,
  spd = 2,
  sprite = player_idle,
  alive = false,
  respawn_timer = 0,
  lives = 3,
  health_meter = max_health
}

-- tables
bullets = {}
enemy_bullets = {}
enemies = {}
particles = {}

enemy_timer = 0
meteor_timer = 0
level_complete_timer = 0
game_over_state_timer = 0
enemy_bullet_timer = 0

game_states = {
  game_over = 0,
  playing = 1,
  level_complete = 2,
  playing_bonus = 3  
}

function add_after_burner(x, y)
  if(player.alive)then
    add(after_burner,
      {
        x = x + flr(rnd(7)),
        y = y + flr(rnd(4)),
        r = 2,
        speed = 3 + flr(rnd(3)),
        color = 5,
        life = 30+flr(rnd(30))
      })
  end
end

function add_meteor_trails()
  for m in all(enemies) do 
    if not m.breakable then 
        for i=1, 2 do 
          add(meteor_trails,
            {
              x = m.x + flr(rnd(8)),
              y = m.y - 1,
              r = flr(rnd(2)),
              speed = 0.2*flr(rnd(4)),
              color = 9,
              life = 5+flr(rnd(10))
            })
        end
    end 
  end 
end

function update_after_burner()
  for p in all(after_burner) do 
    p.y += p.speed 
    p.life -= 1
    p.r -= .03
    if p.life <= 0 then 
      del(after_burner, p)
    end 
  end
end

function update_meteor_trails()
  for m in all(meteor_trails) do 
    m.y -= m.speed 
    
    m.x -= .01 
    m.life -= 1
    m.r -= .08
    if m.life < 7 then
      m.color = 10
    end 
    if m.life <= 0 then 
      del(meteor_trails, m)
    end 
  end
end

--sfx is wrapped because i don't want to play
--sounds when game is not in play mode... even 
--though it is executing some game logic minus
--handling input
function play_sfx(soundindex)
  if not (game_state == game_states.game_over) then 
    sfx(soundindex)
  end
end

function game_over()
  play_sfx(4)  
  game_state = game_states.game_over
  game_over_state_timer = 150
end

function begin_level_complete()
  if enemies_count <= 0 then
    game_state = game_states.level_complete
    level_complete_timer = 0
    bonus = 0
    accuracy = 0
  end
end

function start_level()
  game_state = game_states.playing
  player.respawn_timer = 300
  player.health_meter = max_health
  enemies_count = enemy_squadron_size
  player.x = mid(0, player.x, 120)
  shots_fired_count = 0
end

function update_level_complete()
  if game_state == game_states.level_complete then
    if level_complete_timer == 0 then
      for e in all(enemies) do
        e.y += 1
        if e.y > 0 then 
          del(enemies, e)
        end
      end

      play_sfx(sound_level_complete)  
    end

    --set shot accuracy
    if level_complete_timer == 50 then
      play_sfx(sound_compute_kill_score)
      accuracy = flr((20/shots_fired_count)*100)
    end

    --set kill score
    if level_complete_timer == 100 then
      play_sfx(sound_compute_kill_score)
      bonus = accuracy * 10
      score += bonus
    end

    --pause after kill score before level begins
    if level_complete_timer > 200 and bonus_round_enemy_spawn_count <= 0 then
      level += 1 
      if level > 2 and level % 2 != 0 then
        bonus_round = true
        enemy_squadron_size = 10
        bonus_round_enemy_spawn_count = 6
      else
        bonus_round = false
      end
      start_level()
    end
  end
  
  level_complete_timer += 1
end

function draw_level_complete()
  if game_state == game_states.level_complete then
    if level_complete_timer >= 50 then
 			print("accuracy: "..accuracy.."%", 46, 55, 7)
    end

    if level_complete_timer >= 100 then
 			print("bonus: "..bonus.."!", 46, 65, 7)
    end
  end
end

function start_game()
  game_state = 1
  score = 0
  player.lives = 3
  player.respawn_timer = 300
  player.health_meter = max_health
  enemies_count = enemy_squadron_size
  level = 1
  
  for e in all(enemies) do
    e.y += 1
    if e.y > 0 then 
      del(enemies, e)
    end
  end
  
  player.x = mid(0, player.x, 120)
  shots_fired_count = 0
end

function display_game_over()
  if game_state == game_states.game_over then
    rectfill(10, 50, 50, 20, 0)
    print("game over", 46, 55, 7)
    print("press x to start", 32, 65, 7)
    if game_over_state_timer <= 0 and btnp(4) then
      start_game()
    end
  end  
end

--ships have different possible paths
--straight down, diagonal left, diagonal right and sine wave path
function update_enemy_ship_path(e)

  e.dispatch_timer -= 1
  if e.dispatch_timer > 0 then
    return
  end
  
  if e.path == 1 then
     --do nothing
     e.x += 0
  elseif e.path == 2 then
    e.x += e.speedx
    if e.x > 125 then
      e.x = 4
    end
  elseif e.path == 3 then
  		e.x -= e.speedx
  		if e.x < 0 then
  		   e.x = 125
  		end
  elseif e.path == 4 then
    e.x += (e.speedx * cos(e.y/128))
    if e.x > 128 then
      e.x = 128 
    end 
  else
  	 local delta = player.x - e.x
  	 if delta > 0 then
  	   delta = 1 * e.speedx
  	 else
  	   delta = -1 * e.speedx
  	 end
  	 
  	 if e.x < 0 then
  	    e.x = 125
  	 elseif e.y > 128 then
  	    e.x = 0
  	 end
  end
end

function spawn_meteors()
  if bonus_round then 
    return 
  end 
  local time_span = 80 - (level*10)

  --these are the meteors and there can be only max enemies
  if meteor_timer > (time_span/2) and #enemies <= max_enemies then
    meteor_timer = 0

    add(enemies, {
      x = flr(rnd(12))*10,
      y = flr(rnd(4))*8,
      path = flr(rnd(6)),
      speedx = 0,
      speedy = 1+ flr(rnd(3))/5,
      sp = 10, -- sprite 10 is meteor
      breakable = false,     --this is the main difference between a meteor and a enemy ship
      dispatch_timer = 0
    }) 
  end  
end

bonus_round = false

function spawn_enemy_space_ships()

  if bonus_round and bonus_round_enemy_spawn_count > 0 then
    spawn_enemy_space_ships_bonus()
    bonus_round_enemy_spawn_count -= 1
    return
  end
  -- spawn enemies periodically
  enemy_timer += 1
  meteor_timer += 1
  local time_span = 80 - (level*10)
  if time_span < 10 then
    time_span = 10
  end 

  if enemies_count > 0 and enemy_timer > time_span then
    enemy_timer = 0
    add(enemies, {
      x = flr(rnd(120)),
      y = -8,
      path = flr(rnd(6)),
      speedx = 1+ flr(rnd(3)),
      speedy = 1+ flr(rnd(3)),
      sp = 4 + flr(rnd(5)), -- sprite 4 to 7 
      breakable = true,
      dispatch_timer = 0     
    })
  end
end 

bonus_round_enemy_spawn_count = 0

function spawn_enemy_space_ships_bonus()

  -- spawn enemies periodically
  enemy_timer += 1
  meteor_timer += 1
  local time_span = 180
  if time_span < 10 then
    time_span = 10
  end 

  if enemies_count > 0 and enemy_timer > time_span then
    enemy_timer = 0

    first_enemy = {
      x = flr(rnd(120)),
      y = -8,
      path = flr(rnd(6)),
      speedx = 4,
      speedy = 4,
      sp = 4 + flr(rnd(5)), -- sprite 4 to 7 
      breakable = true, 
      dispatch_timer = 10     
    }

    for i=1, enemy_squadron_size do
      if i == 1 then
        add(enemies, first_enemy)
        add(enemies, {
          x = first_enemy.x+10,
          y = first_enemy.y,
          path = first_enemy.path,
          speedx = first_enemy.speedx,
          speedy = first_enemy.speedy,
          sp = first_enemy.sp,
          breakable = first_enemy.breakable,
          dispatch_timer = first_enemy.dispatch_timer
        })
      else
        -- spawn enemies in a line
        add(enemies, {
          x = first_enemy.x,
          y = first_enemy.y,
          path = first_enemy.path,
          speedx = first_enemy.speedx,
          speedy = first_enemy.speedy,
          sp = first_enemy.sp,
          breakable = first_enemy.breakable,
          dispatch_timer = 10*i+10
        })
        add(enemies, {
          x = first_enemy.x+10,
          y = first_enemy.y,
          path = first_enemy.path,
          speedx = first_enemy.speedx,
          speedy = first_enemy.speedy,
          sp = first_enemy.sp,
          breakable = first_enemy.breakable,
          dispatch_timer = 10*i+10
        })
      end
    end
  end
end 

function spawn_enemies()
  spawn_enemy_space_ships()
  spawn_meteors()
end

function detect_player_collision(player, enemy_object, damage)
  player_hit = false
  if game_state != game_states.game_over then
    if player.alive and  abs(enemy_object.x - player.x) < 6 and abs(enemy_object.y - player.y) < 6 then
      player_hit = true
      player.health_meter -= damage
      
      play_sfx(2)	

      if player.health_meter <= 0 then
        player.alive = false
        player.respawn_timer = 90
        player.lives -= 1
        player.health_meter = max_health
        if player.lives == 0 then
          game_over()
        end 
      end		   	
    end
  end

  return player_hit
end 

function move_player_sideways()
  if game_state == game_states.playing then  
    -- player movement
    if btn(0) then -- left
      player.x -= player.spd
      player.sprite = player_left
    elseif btn(1) then -- right
      player.x += player.spd
      player.sprite = player_right
    else
      player.sprite = player_idle
    end

    --up and down travel
    if btn(3) then -- up
      player.y += player.spd*3
    elseif btn(2) then -- down
      player.y -= player.spd*3
    end
  end

  if player.y < 10 then 
    player.y = 10
  end
  
  if player.y > 100 then
    player.y = 100
  end
    
  -- clamp player to screen
  player.x = mid(0, player.x, 120)
end 

function spawn_player()
  player.respawn_timer -= 1
  if player.respawn_timer <= 0 and not player.alive then
    player.alive = true
  end
end

function fire_bullets(e) 
  if bonus_round then
    return
  end

  if e.breakable and enemy_bullet_timer > 10 then --non breakables i.e. meteors can't shoot bullets
    if e.y == 10 or e.y == 18 or e.y == 26 or e.y == 34 then
      add(enemy_bullets, {
        x = e.x + 4,
        y = e.y + 4
      })
      play_sfx(6)
      enemy_bullet_timer = 0
    end
  end
end 

function delete_enemy(e) 
  if bonus_round then
    if not e.breakable then
      del(enemies, e)
      enemies_count -= 1
    end

    if e.y < -100 then
      del(enemies, e)
      enemies_count -= 1
    end
  else 
    if e.y > 128 then
      del(enemies, e)
    end
  end
  
end 

function player_fire()
  if player.alive and  btnp(4) or btnp(5) then
    add(bullets, {
      x = player.x + 4,
      y = player.y - 2
    })
    play_sfx(1)
    shots_fired_count += 1
  end
end 

function update_player_bullets() 
  -- update bullets
  for b in all(bullets) do
    b.y -= 4
    if b.y < -8 then
      del(bullets, b)
    end
  end
end 

function update_enemy_bullets()
  for eb in all(enemy_bullets) do
    eb.y += 4
    if eb.y > 136 then
      del(enemy_bullets, eb)
    end
  end
end 

function update_particles()
  -- update particles
  for p in all(particles) do
    p.x += p.dx
    p.y += p.dy
    p.life -= 1
    if p.life <= 0 then
      del(particles, p)
    end
  end
end 

function detect_enemy_player_bullet_collisions()
  for b in all(bullets) do
    for e in all(enemies) do
      if abs(b.x - e.x) < 6 and abs(b.y - e.y) < 6 then

        local color = 10
        local life = 20
        local sound = 2
        del(bullets, b)
        if not e.breakable then
          color = 6
          life = 12
        else
          del(enemies, e)
          enemies_count -= 1
          score += 1
        end

        -- spawn explosion particles
        for i=1,6 do
          add(particles, {
            x = e.x + 4,
            y = e.y + 4,
            dx = (rnd(2) - 1)*4,
            dy = (rnd(2) - 1)*4,
            life = life,
            color = color
          })
        end
        play_sfx(sound)

        break
      end
    end
  end
end 

previous_score = 0
function _update()

  if previous_score < 3000 and score >= 3000 then
    play_sfx(3) -- freeman sound
    player.lives += 1
  end

  game_over_state_timer -= 1

  display_game_over()
  update_level_complete()
  update_after_burner()
  spawn_player()
  move_player_sideways()
  add_after_burner(player.x, player.y + 10)
  player_fire()
  update_player_bullets()
  update_enemy_bullets()
  spawn_enemies()
  add_meteor_trails()

  if game_state == game_states.playing or game_state == game_states.game_over then
    -- update enemies
    enemy_bullet_timer += 1
    for e in all(enemies) do   
      if e.dispatch_timer > 0 then
        e.dispatch_timer -= 1
      else
        e.y += e.speedy
      end 

      if bonus_round then
        if e.y > 90 then
          e.speedy *= -1
        end
      end

      if not(e.is_breakable) and bonus_round then
        delete_enemy(e)
      else 
        fire_bullets(e)
        update_enemy_ship_path(e)
        delete_enemy(e)
        detect_player_collision(player, e, 4)
      end
    end

    --enemy bullet collision with our ship
    for eb in all(enemy_bullets) do
      detect_player_collision(player, eb, 1)     
    end

    -- bullet-enemy collision
    detect_enemy_player_bullet_collisions()
    begin_level_complete()
  end

  update_particles()
  update_meteor_trails()
  previous_score = score
end

function repstring(val, n)
  local out = ""
  for i = 1, n do
    out = out..val
  end

  return out
end

function draw_hud()
  local lifestring = repstring("|", player.health_meter)
  local health_color = 2
  
  if player.health_meter < 3 then
    health_color = 8
  else
    health_color = 11 
  end 

  print("score ", 2, 2, 9) 
  print(""..score, 4, 9, 7)
  spr(1, 54, 0)
  print(""..player.lives, 64, 2, 8)
  spr(4, 84, 0)   --alien lives
  print(""..enemies_count, 94, 2, 8)
  print(lifestring, 54, 9, health_color)
  print(lifestring, 55, 9, health_color)
  print(lifestring, 56, 9, health_color)
  print(lifestring, 57, 9, health_color)
  
  print("level: ", 110, 2, 9)
  print(""..level, 113, 9, 7 )
end

function draw_after_burner()
  if game_state == game_states.playing then 
    for p in all(after_burner) do 
      circfill(p.x,p.y, p.r, p.color)
    end 
  end 
end

function draw_meteor_trails()
  for m in all(meteor_trails) do 
    circfill(m.x,m.y, m.r, m.color)
  end 
end

function draw_player()
  if game_state != game_states.game_over then
    if player.alive then
      spr(player.sprite, player.x, player.y)
    elseif player.respawn_timer % 3 == 0 then
      spr(player.sprite, player.x, player.y)
    end
  end
end 

function draw_bullets() 
  -- draw bullets
  for b in all(bullets) do
    rectfill(b.x, b.y, b.x+1, b.y+3, 7)
  end

  for b in all(enemy_bullets) do
    rectfill(b.x, b.y, b.x+1, b.y+3, 10)
  end
end 

function draw_enemy_ships()
  -- draw enemies
  for e in all(enemies) do
    spr(e.sp, e.x, e.y)
  end
end 

function draw_particles() 
  -- draw particles
  for p in all(particles) do
    rectfill(p.x, p.y, p.x+1, p.y+1, p.color) -- orange
  end
end 

function _draw()
  cls()
  draw_hud()
  display_game_over()
  draw_after_burner()

  -- draw player
  if game_state == game_states.playing or game_state == game_states.game_over then
    draw_player()
    draw_bullets()
    draw_enemy_ships()
    draw_meteor_trails()
    draw_particles()
  end

  draw_level_complete()
end
